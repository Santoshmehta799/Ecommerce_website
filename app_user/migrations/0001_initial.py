# Generated by Django 5.0 on 2024-01-05 06:27

import app_user.managers.user_managers
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created_by', models.UUIDField(blank=True, help_text='User Id who created this record.', null=True)),
                ('updated_by', models.UUIDField(blank=True, help_text='User Id who updated this record.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time at which this record is created', null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time at which this record is last updated.', null=True)),
                ('user_uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('show_password', models.CharField(blank=True, max_length=128, null=True)),
                ('email_verified', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Auth - Users',
                'verbose_name_plural': 'Auth - Users',
            },
            managers=[
                ('objects', app_user.managers.user_managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ProfileSettings',
            fields=[
                ('created_by', models.UUIDField(blank=True, help_text='User Id who created this record.', null=True)),
                ('updated_by', models.UUIDField(blank=True, help_text='User Id who updated this record.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time at which this record is created', null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time at which this record is last updated.', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('receive_order_update_whatsapp', models.BooleanField(default=False)),
                ('receive_order_update_call', models.BooleanField(default=False)),
                ('receive_order_update_email', models.BooleanField(default=False)),
                ('receive_payment_update_whatsapp', models.BooleanField(default=False)),
                ('receive_payment_update_call', models.BooleanField(default=False)),
                ('receive_payment_update_email', models.BooleanField(default=False)),
                ('order_handling_time', models.CharField(blank=True, choices=[('1-day', '1 Day'), ('2-day', '2 Day'), ('3-day', '3 Day'), ('4-day', '4 Day'), ('5-day', '5 Day'), ('6-day', '6 Day'), ('7-day', '7 Day'), ('8-day', '8 Day'), ('9-day', '9 Day'), ('10-day', '10 Day'), ('same-day', 'Same day'), ('more-than-10-days', 'More Than 10 Days')], max_length=50, null=True)),
                ('order_cutt_off_time', models.CharField(blank=True, choices=[('00.00', '12.00 AM'), ('00.30', '12.30 AM'), ('01.00', '01.00 AM'), ('01.30', '01.30 AM'), ('02.00', '02.00 AM'), ('02.30', '02.30 AM'), ('03.00', '03.00 AM'), ('03.30', '03.30 AM'), ('04.00', '04.00 AM'), ('04.30', '04.30 AM'), ('05.00', '05.00 AM'), ('05.30', '05.30 AM'), ('06.00', '06.00 AM'), ('06.30', '06.30 AM'), ('07.00', '07.00 AM'), ('07.30', '07.30 AM'), ('08.00', '08.00 AM'), ('08.30', '08.30 AM'), ('09.00', '09.00 AM'), ('09.30', '09.30 AM'), ('10.00', '10.00 AM'), ('10.30', '10.30 AM'), ('11.00', '11.00 AM'), ('11.30', '11.30 AM'), ('12.00', '12.00 PM'), ('12.30', '12.30 PM'), ('13.00', '01.00 PM'), ('13.30', '01.30 PM'), ('14.00', '02.00 PM'), ('14.30', '02.30 PM'), ('15.00', '03.00 PM'), ('15.30', '03.30 PM'), ('16.00', '04.00 PM'), ('16.30', '04.30 PM'), ('17.00', '05.00 PM'), ('17.30', '05.30 PM'), ('18.00', '06.00 PM'), ('18.30', '06.30 PM'), ('19.00', '07.00 PM'), ('19.30', '07.30 PM'), ('20.00', '08.00 PM'), ('20.30', '08.30 PM'), ('21.00', '09.00 PM'), ('21.30', '09.30 PM'), ('22.00', '10.00 PM'), ('22.30', '10.30 PM'), ('23.00', '11.00 PM'), ('23.30', '11.30 PM')], max_length=50, null=True)),
                ('seller', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='seller_profile_setting', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Auth - Profile Settings',
                'verbose_name_plural': 'Auth - Profile Settings',
            },
        ),
    ]
